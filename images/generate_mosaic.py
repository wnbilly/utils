"""
This is a script to generate a mosaic of one the image pairs generated by the Dreambooth model using Null Text Inversion.
Based on the work of Yasser BENIGMIN.
"""
import torchvision
import os
from PIL import Image
from torchvision import transforms
import matplotlib.pyplot as plt
from glob import glob

def create_directory(directory):
    """
    Create a directory if it does not exist
    """
    if not os.path.exists(directory):
        os.makedirs(directory)

def parser():
    import argparse

    parser = argparse.ArgumentParser(
        description="Generate a mosaic of the images in the filepath using torchvision"
    )
    parser.add_argument(
        "--root-pairs",
        type=str,
        default="/home/ids/benigmim/projects/prompt-to-prompt/pair_images",
        help="root path to the pair images",
    )

    parser.add_argument(
        "--num_images",
        type=int,
        default=7,
        help="Number of images to be used for the mosaic",
    )
    parser.add_argument(
        "--model",
        type=str,
        required=True,
        help="Name of the model to be used for the mosaic",
    )
    parser.add_argument(
        "--root-mosaic",
        default="/home/ids/benigmim/projects/prompt-to-prompt/mosaic",
        help=" folder containing the mosaic images",
    )
    return parser.parse_args()


def main():
    args = parser()
    model_path = os.path.join(args.root_pairs, args.model)
    output_folder = os.path.join(args.root_mosaic, args.model)
    create_directory(output_folder)
    filepath = os.path.join(model_path, "inf_ckpt*")
    indices_path = f"./my_utils/gta5_style_25.txt"
    images_list = [i_id.strip() for i_id in open(indices_path)]
    imgs = []
    convert_tensor = transforms.Compose(
        [
            transforms.ToTensor(),
        ]
    )
    # Iterate over the for args.num_images images
    for img in images_list[: args.num_images]:
        counter = 0
        # Iterate over the temporally ordered checkpoints
        for subdir in sorted(
            glob(filepath), key=lambda x: int(x.split("inf_ckpt", 1)[1])
        ):
            if not counter:
                im_path_source = os.path.join(subdir, "source_" + img)
                imgs.append(convert_tensor(Image.open(im_path_source)))
                im_path_target = os.path.join(subdir, "target_" + img)
                imgs.append(convert_tensor(Image.open(im_path_target)))
            else:
                im_path_target = os.path.join(subdir, "target_" + img)
                imgs.append(convert_tensor(Image.open(im_path_target)))
            counter += 1

    mosaic = torchvision.utils.make_grid(imgs, nrow=len(glob(filepath)) + 1, padding=1)
    torchvision.utils.save_image(
        mosaic, os.path.join(output_folder, f"{args.model}_mosaic-per-ckpt.png")
    )

if __name__ == "__main__":
    main()